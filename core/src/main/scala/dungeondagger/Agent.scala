package dungeondagger

trait Action

case class Move(obj: Agent, direction: Byte) extends Action
//case object Feed extends Action
case class Spawn(baby: Agent) extends Action
case object Die extends Action

object AgentNiche extends Enumeration {
  type AgentKind = Value
  val Front, Grass = Value
}

/** Data received by agents prior to act.
  *
  * @param data generated by the [[World]] based on agents sensorium abilities
  */
case class FieldOfVision(data:Map[Dxy, World.Cell])

abstract case class Agent(niche: AgentNiche.Value, id: Int = Agent.nextId) {
  def act(fieldOfVision: FieldOfVision): Option[Action]
}

object Agent {
  private var count: Int = 0
  def nextId = {count += 1; count}
}